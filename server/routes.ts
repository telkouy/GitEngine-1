import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";

export async function registerRoutes(app: Express): Promise<Server> {
  // Dashboard data endpoints
  app.get("/api/dashboard/:userId", async (req, res) => {
    try {
      const { userId } = req.params;

      const [dailyStats, commits, insights, documentation, okrs, achievements, integrations, nextSteps] = await Promise.all([
        storage.getDailyStats(userId),
        storage.getCommits(userId),
        storage.getInsights(userId),
        storage.getDocumentation(userId),
        storage.getOKRs(userId),
        storage.getAchievements(userId),
        storage.getIntegrations(userId),
        storage.getNextSteps(userId),
      ]);

      res.json({
        dailyStats: {
          commitsToday: 7,
          insightsGenerated: 12,
          hoursLogged: 8,
          docsUpdated: 3
        },
        commits,
        insights,
        documentation,
        okrs,
        achievements,
        integrations,
        nextSteps,
      });
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Get user by username (for demo purposes)
  app.get("/api/user/:username", async (req, res) => {
    try {
      const { username } = req.params;
      const user = await storage.getUserByUsername(username);

      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }

      res.json(user);
    } catch (error) {
      console.error("Error fetching user:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Generate new insight
  app.post("/api/insights", async (req, res) => {
    try {
      const { userId, category = "Performance" } = req.body;

      const insights = [
        {
          title: "Code Review Velocity Increase",
          description: "Your review turnaround time has improved by 25% this week",
          category: "Performance",
          impact: "Medium Impact",
        },
        {
          title: "Test Coverage Opportunity",
          description: "2 new modules could benefit from additional test coverage",
          category: "Code Quality",
          impact: "Medium Impact",
        },
        {
          title: "Cross-team Collaboration Boost",
          description: "Your mentoring sessions increased team productivity by 15%",
          category: "Business Impact",
          impact: "High Impact",
        },
      ];

      const randomInsight = insights[Math.floor(Math.random() * insights.length)];
      const newInsight = await storage.createInsight({
        ...randomInsight,
        userId,
      });

      res.json(newInsight);
    } catch (error) {
      console.error("Error creating insight:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Create new documentation
  app.post("/api/documentation", async (req, res) => {
    try {
      const { title, type, userId } = req.body;

      if (!title || !type || !userId) {
        return res.status(400).json({ message: "Missing required fields" });
      }

      const newDoc = await storage.createDocumentation({
        title,
        type,
        status: "In Progress",
        isAutoGenerated: false,
        userId,
      });

      res.json(newDoc);
    } catch (error) {
      console.error("Error creating documentation:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}