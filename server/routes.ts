import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import {
  getDashboardData,
  getInsights,
  getCommits,
  getDocuments,
  createDocument,
  getAchievements,
  getOkrs,
  getProjects,
  getAnalytics
} from './storage';

export async function registerRoutes(app: Express): Promise<Server> {
  // Dashboard data endpoints
  app.get("/api/dashboard/:userId", async (req, res) => {
    try {
      const { userId } = req.params;

      const [dailyStats, commits, insights, documentation, okrs, achievements, integrations, nextSteps] = await Promise.all([
        storage.getDailyStats(userId),
        storage.getCommits(userId),
        storage.getInsights(userId),
        storage.getDocumentation(userId),
        storage.getOKRs(userId),
        storage.getAchievements(userId),
        storage.getIntegrations(userId),
        storage.getNextSteps(userId),
      ]);

      res.json({
        dailyStats: {
          commitsToday: 7,
          insightsGenerated: 12,
          hoursLogged: 8,
          docsUpdated: 3
        },
        commits,
        insights,
        documentation,
        okrs,
        achievements,
        integrations,
        nextSteps,
      });
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Get user by username (for demo purposes)
  app.get("/api/user/demo", async (req, res) => {
    try {
      const user = await storage.getUserByUsername("demo");

      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }

      res.json(user);
    } catch (error) {
      console.error("Error fetching user:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Insights endpoints
  app.get("/api/insights/:userId", async (req, res) => {
    try {
      const { userId } = req.params;
      const { category } = req.query;
      const filters = category ? [category as string] : undefined;
      const insights = getInsights(userId, filters);
      res.json(insights);
    } catch (error) {
      console.error("Error fetching insights:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.post("/api/insights", async (req, res) => {
    try {
      const { userId, title, description, category = "Performance", impact = "Medium Impact" } = req.body;

      if (!userId || !title || !description) {
        return res.status(400).json({ message: "Missing required fields: userId, title, description" });
      }

      const newInsight = await storage.createInsight({
        title,
        description,
        category,
        impact,
        userId,
      });

      res.json(newInsight);
    } catch (error) {
      console.error("Error creating insight:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Documentation endpoints
  app.get("/api/documentation/:userId", async (req, res) => {
    try {
      const { userId } = req.params;
      const docs = storage.getDocumentation(userId);
      res.json(docs);
    } catch (error) {
      console.error("Error fetching documentation:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.post("/api/documentation", async (req, res) => {
    try {
      const { title, type, userId, status = "In Progress", isAutoGenerated = false } = req.body;

      if (!title || !type || !userId) {
        return res.status(400).json({ message: "Missing required fields: title, type, userId" });
      }

      const newDoc = storage.createDocumentation({
        title,
        type,
        status,
        isAutoGenerated,
        userId,
      });

      res.json(newDoc);
    } catch (error) {
      console.error("Error creating documentation:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  app.put("/api/documentation/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const { title, type, status } = req.body;

      // Note: This would need implementation in storage
      // const updatedDoc = await storage.updateDocumentation(id, { title, type, status });

      res.json({ message: "Documentation update endpoint - needs storage implementation" });
    } catch (error) {
      console.error("Error updating documentation:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // OKRs endpoints
  app.get("/api/okrs/:userId", async (req, res) => {
    try {
      const { userId } = req.params;
      const okrs = getOkrs(userId);
      res.json(okrs);
    } catch (error) {
      console.error("Error fetching OKRs:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Achievements endpoints
  app.get("/api/achievements/:userId", async (req, res) => {
    try {
      const { userId } = req.params;
      const achievements = getAchievements(userId);
      res.json(achievements);
    } catch (error) {
      console.error("Error fetching achievements:", error);
      res.status(500).json({ message: "Internal server error" });
    }
  });

  // Next steps
  app.get("/api/next-steps/:userId", async (req, res) => {
    const { userId } = req.params;
    const nextSteps = await storage.getNextSteps(userId);
    res.json(nextSteps);
  });

  // Project templates
  app.get("/api/projects/templates", async (req, res) => {
    const templates = await storage.getProjectTemplates();
    res.json(templates);
  });

  // Active projects  
  app.get("/api/projects/active", async (req, res) => {
    const projects = await storage.getActiveProjects();
    res.json(projects);
  });

  // Archived projects
  app.get("/api/projects/archive", async (req, res) => {
    const projects = await storage.getArchivedProjects();
    res.json(projects);
  });

  // Analytics data
  app.get("/api/analytics", async (req, res) => {
    const analytics = await storage.getAnalyticsData();
    res.json(analytics);
  });

  // Code reviews
  app.get("/api/code-reviews", async (req, res) => {
    const reviews = await storage.getCodeReviews();
    res.json(reviews);
  });

  // Git integration data
  app.get("/api/git-integration", async (req, res) => {
    res.json({
      connectedRepos: 8,
      totalCommits: 1247,
      branches: 23,
      pullRequests: { open: 5, merged: 142, closed: 8 },
      contributors: ["Alex Johnson", "Sarah Chen", "David Kim", "Emma Wilson"],
      lastSync: new Date(),
      webhooksActive: true
    });
  });

  // Commits endpoint
  app.get('/api/commits/:userId', (req, res) => {
    const { userId } = req.params;
    const { limit } = req.query;
    const commits = getCommits(userId, limit ? parseInt(limit as string) : undefined);
    res.json(commits);
  });

  // Documents endpoint
  app.get('/api/documents/:userId', (req, res) => {
    const { userId } = req.params;
    const documents = getDocuments(userId);
    res.json(documents);
  });

  // Create document endpoint
  app.post('/api/documents/:userId', (req, res) => {
    const { userId } = req.params;
    const { title, content, type } = req.body;

    if (userId !== "demo-user") {
      return res.status(404).json({ error: 'User not found' });
    }

    const newDoc = createDocument(title, content, type);
    res.json(newDoc);
  });

  // Projects endpoint
  app.get('/api/projects/:userId', (req, res) => {
    const { userId } = req.params;
    const projects = getProjects(userId);
    res.json(projects);
  });

  // Analytics endpoint
  app.get('/api/analytics/:userId', (req, res) => {
    const { userId } = req.params;
    const { timeRange } = req.query;
    const analytics = getAnalytics(userId, timeRange as string);

    if (!analytics) {
      return res.status(404).json({ error: 'Analytics data not found' });
    }

    res.json(analytics);
  });

  const httpServer = createServer(app);
  return httpServer;
}